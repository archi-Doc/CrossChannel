// Copyright (c) All contributors. All rights reserved. Licensed under the MIT license.

using System.Text;
using Arc.Visceral;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

#pragma warning disable RS2008
#pragma warning disable SA1310 // Field names should not contain underscore
#pragma warning disable SA1401 // Fields should be private
#pragma warning disable SA1117 // Parameters should be on same line or separate lines

namespace CrossChannel.Generator;

public class CrossChannelBody : VisceralBody<CrossChannelObject>
{
    public const string GeneratorName = "CrossChannelGenerator";
    public const string InitializerName = "__InitializeCC__";
    public const string BrokerName = "__Broker__";
    public const string ArgumentName = "a";
    public const string RadioResultFullName = "CrossChannel.RadioResult";

    public static readonly DiagnosticDescriptor Error_AttributePropertyError = new DiagnosticDescriptor(
        id: "NSG001", title: "Attribute property type error", messageFormat: "The argument specified does not match the type of the property",
        category: GeneratorName, DiagnosticSeverity.Error, isEnabledByDefault: true);

    public static readonly DiagnosticDescriptor Error_IRadioService = new DiagnosticDescriptor(
        id: "NSG002", title: "IRadioService", messageFormat: "RadioServiceInterface must be derived from IRadioService",
        category: GeneratorName, DiagnosticSeverity.Error, isEnabledByDefault: true);

    public CrossChannelBody(SourceProductionContext context)
        : base(context)
    {
    }

    internal List<CrossChannelObject> Objects = new();

    internal Dictionary<string, List<CrossChannelObject>> Namespaces = new();

    public void Prepare()
    {
        // Configure objects.
        var array = this.FullNameToObject.Values.ToArray();
        foreach (var x in array)
        {
            x.Configure();
        }

        this.FlushDiagnostic();
        if (this.Abort)
        {
            return;
        }

        foreach (var x in array)
        {
            x.ConfigureRelation();
        }

        // Check
        foreach (var x in array)
        {
            x.Check();
        }

        this.FlushDiagnostic();
        if (this.Abort)
        {
            return;
        }
    }

    public void Generate(IGeneratorInformation generator, CancellationToken cancellationToken)
    {
        var assemblyId = string.Empty; // Assembly ID
        if (!string.IsNullOrEmpty(generator.AssemblyName))
        {
            assemblyId = VisceralHelper.AssemblyNameToIdentifier("_" + generator.AssemblyName);
        }

        this.GenerateLoader(generator, assemblyId);
        this.GenerateMain(generator, assemblyId);
    }

    public void GenerateLoader(IGeneratorInformation generator, string assemblyId)
    {
        ScopingStringBuilder ssb = new();
    }

    public void GenerateMain(IGeneratorInformation generator, string assemblyId)
    {
        ScopingStringBuilder ssb = new();
    }

    private void GenerateHeader(ScopingStringBuilder ssb)
    {
        ssb.AddHeader("// <auto-generated/>");
        ssb.AddUsing("System");
        ssb.AddUsing("System.Collections.Generic");
        ssb.AddUsing("System.Diagnostics.CodeAnalysis");
        ssb.AddUsing("System.Runtime.CompilerServices");
        // ssb.AddUsing("Arc.Collections");
        ssb.AddUsing("CrossChannel");

        ssb.AppendLine("#nullable enable", false);
        ssb.AppendLine("#pragma warning disable CS1591", false);
        ssb.AppendLine("#pragma warning disable CS1998", false);
        ssb.AppendLine();
    }
}
